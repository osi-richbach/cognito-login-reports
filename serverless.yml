service: cognito-logins-report
frameworkVersion: '2'

plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters
  - serverless-offline
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: us-west-2
  apiGateway:
    shouldStartNameWithService: true

custom:
  dev:
    userPoolId: us-west-2_FCgAM8Jlo
  prod:
    userPoolId: us-west-2_FCgAM8Jlo 

  user-pool-arn: arn:aws:cognito-idp:${self:provider.region}:#{AWS::AccountId}:userpool/${self:custom.${self:provider.stage}.userPoolId}
  state-machine-name: ${self:service}-${self:provider.stage}
  state-machine-arn: arn:aws:states:${self:provider.region}:#{AWS::AccountId}:stateMachine:${self:custom.state-machine-name} 
  login-report-table-name: ${self:service}-${self:provider.stage}-login-report
  non-confirmed-users-table-name: ${self:service}-${self:provider.stage}-non-confirmed-users
  find-users-dlq-sns-topic: ${self:service}-${self:provider.stage}-findUsersDlq
  find-users-dlq-sns-topic-arn: arn:aws:sns:${self:provider.region}:#{AWS::AccountId}:${self:custom.find-users-dlq-sns-topic} 

functions:
  apiInitiateStateMachine:
    handler: src/api/initiateLoginReport.handler
    environment:
      STATE_MACHINE_ARN: ${self:custom.state-machine-arn}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - states:StartExecution
        Resource: ${self:custom.state-machine-arn}
    events:
      - http: 
          method: POST
          path: initiate

  findUsers:
    handler: src/findUsers.handler
    environment:
      USER_POOL_ID: ${self:custom.${self:provider.stage}.userPoolId} 
      REGION: ${self:provider.region}
      LIST_NON_CONFIRMED_USERS: 'true'      
    iamRoleStatements:
      - Effect: Allow
        Action:
          - cognito-idp:ListUsers
        Resource: ${self:custom.user-pool-arn}

  findUsersDlq:
    handler: src/findUsersDlq.handler
    events:
      - sns: ${self:custom.find-users-dlq-sns-topic}

  processConfirmedUsers:
    handler: src/processConfirmedUsers.handler
    environment:
      USER_POOL_ID: ${self:custom.${self:provider.stage}.userPoolId} 
      REGION: ${self:provider.region}
      LOGIN_REPORT_TABLE_NAME: ${self:custom.login-report-table-name}
      NON_CONFIRMED_USERS_TABLE_NAME: ${self:custom.non-confirmed-users-table-name}
      FIND_USERS_DLQ_TOPIC_ARN: ${self:custom.find-users-dlq-sns-topic-arn}  
    iamRoleStatements:
      - Effect: Allow
        Action:
        - dynamodb:BatchWriteItem
        Resource:
        - Fn::Sub: arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/${self:custom.login-report-table-name}
        - Fn::Sub: arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/${self:custom.non-confirmed-users-table-name}
      - Effect: Allow
        Action:
        - cognito-idp:AdminListUserAuthEvents
        Resource:
          Fn::Sub: arn:aws:cognito-idp:${self:provider.region}:#{AWS::AccountId}:userpool/${self:custom.${self:provider.stage}.userPoolId}      

  processNonConfirmedUsers:
    handler: src/processNonConfirmedUsers.handler
    environment:
      USER_POOL_ID: ${self:custom.${self:provider.stage}.userPoolId} 
      REGION: ${self:provider.region}
      TABLE_NAME: ${self:custom.non-confirmed-users-table-name}
      FIND_USERS_DLQ_TOPIC_ARN: ${self:custom.find-users-dlq-sns-topic-arn}        
    iamRoleStatements:
      - Effect: Allow
        Action:
        - dynamodb:BatchWriteItem
        Resource:
          Fn::Sub: arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/${self:custom.non-confirmed-users-table-name}

  failedLoginsReport:
    handler: src/failedLoginsReport.handler
    environment:
      REGION: ${self:provider.region}
      TABLE_NAME: ${self:custom.non-confirmed-users-table-name}
      LOGIN_REPORT_TABLE_NAME: ${self:custom.login-report-table-name}  
    iamRoleStatements:
      - Effect: Allow
        Action:
        - dynamodb:Scan
        Resource:
        - Fn::Sub: arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/${self:custom.non-confirmed-users-table-name}
        - Fn::Sub: arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/${self:custom.login-report-table-name}
      - Effect: Allow
        Action:
        - s3:putObject
        - s3:upload
        Resource:
        - arn:aws:s3:::cwds.cognito.userlist/*-idp:${self:provider.region}:#{AWS::AccountId}:userpool/${self:custom.${self:provider.stage}.userPoolId}      

  noRecentLoginsReport:
    handler: src/noRecentLoginsReport.handler
    environment:
      REGION: ${self:provider.region}
      ALLOWED_DAYS_WITHOUT_LOGIN: 30
      NON_CONFIRMED_USERS_TABLE_NAME: ${self:custom.non-confirmed-users-table-name}
      CONFIRMED_USERS_TABLE_NAME: ${self:custom.login-report-table-name}  
    iamRoleStatements:
      - Effect: Allow
        Action:
        - dynamodb:Scan
        Resource:
        - Fn::Sub: arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/${self:custom.non-confirmed-users-table-name}
        - Fn::Sub: arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/${self:custom.login-report-table-name}
      - Effect: Allow
        Action:
        - s3:putObject
        - s3:upload
        Resource:
        - arn:aws:s3:::cwds.cognito.userlist/*-idp:${self:provider.region}:#{AWS::AccountId}:userpool/${self:custom.${self:provider.stage}.userPoolId}      

  successfulLoginsReport:
    handler: src/successfulLoginsReport.handler
    environment:
      REGION: ${self:provider.region}
      LOGIN_REPORT_TABLE_NAME: ${self:custom.login-report-table-name}  
    iamRoleStatements:
      - Effect: Allow
        Action:
        - dynamodb:Scan
        Resource:
        - Fn::Sub: arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/${self:custom.non-confirmed-users-table-name}
        - Fn::Sub: arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/${self:custom.login-report-table-name}
      - Effect: Allow
        Action:
        - s3:putObject
        - s3:upload
        Resource:
        - arn:aws:s3:::cwds.cognito.userlist/*-idp:${self:provider.region}:#{AWS::AccountId}:userpool/${self:custom.${self:provider.stage}.userPoolId}      

stepFunctions:
  stateMachines:
    GatherWeeklyLoginData:
      name: ${self:custom.state-machine-name}
      definition:
        StartAt: FindUsers
        States:
          FindUsers:
            Type: Task
            Parameters:
              page_token.$: "$.find_users.next_page_token"
            Resource: 
              Fn::GetAtt: [findUsers, Arn]
            Next: ProcessUsers
          ProcessUsers:
            Type: Parallel
            Next: CleanupState
            Branches:
            - StartAt: ProcessConfirmedUsers
              States:
                ProcessConfirmedUsers:
                  Type: Task
                  Parameters:
                    users.$: "$.find_users.confirmed_users"
                  ResultPath: "$.confirmed_users_result"
                  Resource: 
                    Fn::GetAtt: [processConfirmedUsers, Arn]
                  End: true
            - StartAt: ProcessNonConfirmedUsers
              States:
                ProcessNonConfirmedUsers:
                  Type: Task
                  Parameters:
                    users.$: "$.find_users.non_confirmed_users"
                  ResultPath: "$.non_confirmed_users_result"
                  Resource: 
                    Fn::GetAtt: [processNonConfirmedUsers, Arn]
                  End: true
          CleanupState:
            Type: Pass
            OutputPath: "$[0]"
            Next: ProcessAnotherPage
          ProcessAnotherPage:
            Type: Choice
            Choices:
            - Not:
                Variable: "$.find_users.next_page_token"
                StringEquals: NONE
              Next: FindUsers
            Default: DataGatheringComplete            
          DataGatheringComplete:
            Type: Pass
            Next: FailedLoginsReport
          FailedLoginsReport:
            Type: Task
            Resource: arn:aws:lambda:us-west-2:${AWS::AccountId}:function:cognito-ab-deployment-FailedLoginsReport FIXME
            Parameters:
              job_id: placeholder
            Next: SuccessfulLoginsReport
          SuccessfulLoginsReport:
            Type: Task
            Resource: arn:aws:lambda:us-west-2:${AWS::AccountId}:function:cognito-ab-deployment-LastWeekLoginsReport FIXME
            Parameters:
              job_id: placeholder
            Next: NoRecentLoginReport
          NoRecentLoginReport:
            Type: Task
            Resource: arn:aws:lambda:us-west-2:${AWS::AccountId}:function:cognito-ab-deployment-NoRecentLoginReport FIXME
            Parameters:
              job_id: placeholder
            Next: ReportsComplete
          ReportsComplete:
            Type: Pass
            End: true            

resources:
  Resources:
    nonConfirmedUsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.non-confirmed-users-table-name}
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5            
    loginReportTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.login-report-table-name}
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
          - AttributeName: jobId
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
          - AttributeName: jobId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5            